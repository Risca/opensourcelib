diff --git a/mwlib/advtree.py b/mwlib/advtree.py
index 61d2e4d9..165f966d 100644
--- a/mwlib/advtree.py
+++ b/mwlib/advtree.py
@@ -26,6 +26,7 @@ from mwlib.parser import ArticleLink, InterwikiLink, NamespaceLink
 from mwlib.parser import Item, ItemList, Node, Table, Row, Cell, Paragraph, PreFormatted
 from mwlib.parser import Section, Style, TagNode, Text, Timeline
 from mwlib.parser import ImageLink, Article, Book, Chapter
+from mwlib.parser import PlantUml
 import copy
 from mwlib.log import Log

@@ -606,7 +607,7 @@ Open Issues: Math, Magic, (unknown) TagNode
 _blockNodes = (Blockquote, Book, Chapter, Article, Section, Paragraph, Div, Center,
                PreFormatted, Cell, Row, Table, Item, BreakingReturn,
                ItemList, Timeline, HorizontalRule, Gallery, Indented,
-               DefinitionList, DefinitionTerm, DefinitionDescription, ReferenceList, Source, ImageMap)
+               DefinitionList, DefinitionTerm, DefinitionDescription, ReferenceList, Source, ImageMap, PlantUml)

 for k in _blockNodes:
     k.isblocknode = True
diff --git a/mwlib/parser/__init__.py b/mwlib/parser/__init__.py
index 65dbafd6..66af4532 100755
--- a/mwlib/parser/__init__.py
+++ b/mwlib/parser/__init__.py
@@ -22,4 +22,5 @@ from mwlib.parser.nodes import (Node, Math, Ref, Item, ItemList, Style,
                                 Book, Chapter, Article, Paragraph, Section,
                                 Timeline, TagNode, PreFormatted, URL, NamedURL,
                                 Table, Row, Cell, Caption, Link, ArticleLink, SpecialLink,
-                                NamespaceLink, InterwikiLink, LangLink, CategoryLink, ImageLink, Text, Control)
+                                NamespaceLink, InterwikiLink, LangLink, CategoryLink, ImageLink, Text, Control,
+                                PlantUml)
diff --git a/mwlib/parser/nodes.py b/mwlib/parser/nodes.py
index b8c7423d..cd64814f 100644
--- a/mwlib/parser/nodes.py
+++ b/mwlib/parser/nodes.py
@@ -346,3 +346,6 @@ class Text(Node):

 class Control(Text):
     pass
+
+class PlantUml(Node):
+    pass
diff --git a/mwlib/plantuml.py b/mwlib/plantuml.py
new file mode 100644
index 00000000..2f1d825e
--- /dev/null
+++ b/mwlib/plantuml.py
@@ -0,0 +1,54 @@
+#! /usr/bin/env python
+
+# Copyright (c) 2007-2009 PediaPress GmbH
+# See README.rst for additional licensing information.
+
+
+import os
+import tempfile
+import subprocess
+from hashlib import md5
+
+_basedir = None
+
+
+def _get_global_basedir():
+    global _basedir
+    if not _basedir:
+        _basedir = tempfile.mkdtemp(prefix='plantuml-')
+        import atexit
+        import shutil
+        atexit.register(shutil.rmtree, _basedir)
+    return _basedir
+
+
+def drawUml(script, basedir=None):
+    if isinstance(script, unicode):
+        script = script.encode('utf8')
+    if basedir is None:
+        basedir = _get_global_basedir()
+
+    m=md5()
+    m.update(script)
+    ident = m.hexdigest()
+
+    pngfile = os.path.join(basedir, ident+'.png')
+    if os.path.exists(pngfile):
+        return pngfile
+
+    scriptfile = os.path.join(basedir, ident+'.txt')
+    f = open(scriptfile, 'w')
+    f.write("@startuml\n")
+    f.write(script)
+    f.write("@enduml\n")
+    f.close()
+    jar = os.path.join(os.path.dirname(__file__), "plantuml.jar")
+
+    err = os.system("java -Djava.awt.headless=true -jar %s %s" % (jar, scriptfile))
+    if err != 0:
+        return None
+
+    if os.path.exists(pngfile):
+        return pngfile
+
+    return None
diff --git a/mwlib/refine/compat.py b/mwlib/refine/compat.py
index 866682f8..1af771a6 100644
--- a/mwlib/refine/compat.py
+++ b/mwlib/refine/compat.py
@@ -151,6 +151,8 @@ def _change_classes(node):
             elif node.tagname == "u":
                 node.__class__ = N.Style
                 node.caption == "u"
+            elif node.tagname == "uml":
+                node.__class__ = N.PlantUml

         if node.__class__ == N.Link:
             ns = node.ns
diff --git a/mwlib/refine/core.py b/mwlib/refine/core.py
index 0aa2c96d..d4fa50b6 100755
--- a/mwlib/refine/core.py
+++ b/mwlib/refine/core.py
@@ -902,6 +902,9 @@ class parse_uniq(object):

         return T(type=T.t_complex_tag, tagname=name, vlist=vlist, children=children)

+    def create_uml(self, name, vlist, inner, xopts):
+        return T(type=T.t_complex_tag, tagname="uml", vlist=vlist, uml=inner, blocknode=True)
+

 class XBunch(object):
     def __init__(self, **kw):
diff --git a/mwlib/tagext.py b/mwlib/tagext.py
index d071dc4b..b65eee5d 100755
--- a/mwlib/tagext.py
+++ b/mwlib/tagext.py
@@ -103,7 +103,7 @@ fan featuredimage gallerypopulate linkfilter listpages
 loggedin loggedout newusers pagequality pollembed randomfeatureduser
 randomgameunit randomimagebycategory randomuserswithavatars
 rss siteactivity userpoll videogallerypopulate vote
-welcomeuser xsound pageby uml graphviz categorytree summary slippymap""".split()
+welcomeuser xsound pageby graphviz categorytree summary slippymap""".split()

 for name in tags_to_ignore:
     def _f(name):
@@ -252,6 +252,16 @@ class ListingExtension(TagExtension):
 register(ListingExtension)


+class PlantUmlExtension(TagExtension):
+    name = 'uml'
+    def __call__(self, source, attributes):
+	from mwlib.parser import PlantUml
+	return PlantUml(source)
+
+
+register(PlantUmlExtension)
+
+
 class SeeExtension(ListingExtension):
     name = "see"

diff --git a/mwlib/treecleaner.py b/mwlib/treecleaner.py
index b39f1c92..e253e37e 100755
--- a/mwlib/treecleaner.py
+++ b/mwlib/treecleaner.py
@@ -13,7 +13,7 @@ from mwlib.advtree import (Article, ArticleLink, Big, Blockquote, Book, Breaking
                            HorizontalRule, ImageLink, ImageMap, Inserted, InterwikiLink, Italic, Item, ItemList, LangLink, Link,
                            Math, NamedURL, NamespaceLink, Overline, Paragraph, PreFormatted, Reference, ReferenceList,
                            Row, Section, Small, Source, Span, SpecialLink, Strike, Strong, Sub, Sup, Table, Teletyped, Text, Timeline,
-                           Underline, URL, Var)
+                           Underline, URL, Var, PlantUml)

 from mwlib.treecleanerhelper import getNodeHeight, splitRow
 from mwlib import parser
@@ -135,7 +135,7 @@ class TreeCleaner(object):
         # list of nodes which do not require child nodes
         self.childlessOK = [ArticleLink, BreakingReturn, CategoryLink, Cell, Chapter, Code,
                             HorizontalRule, ImageLink, ImageMap, InterwikiLink, LangLink, Link, Math,
-                            NamedURL, NamespaceLink, ReferenceList, Reference, SpecialLink, Text, Timeline, URL]
+                            NamedURL, NamespaceLink, ReferenceList, Reference, SpecialLink, Text, Timeline, URL, PlantUml]
         # exceptions to the above. if any of the list items is explicitly set as a
         # css style the node is not removed
         common_attrs = [u'width', u'height', u'page-break-before', u'page-break-after']
diff --git a/mwlib/uniq.py b/mwlib/uniq.py
index a47d35a8..7b0016c4 100644
--- a/mwlib/uniq.py
+++ b/mwlib/uniq.py
@@ -62,7 +62,7 @@ class Uniquifier(object):
         self.txt = txt
         rx = self.rx
         if rx is None:
-            tags = set("nowiki math imagemap gallery source pre ref timeline poem pages".split())
+            tags = set("nowiki math imagemap gallery source pre ref timeline poem pages uml".split())
             from mwlib import tagext
             tags.update(tagext.default_registry.names())
