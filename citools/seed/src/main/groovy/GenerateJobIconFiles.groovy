import static com.zenterio.jenkins.scriptlet.Token.escape

import com.zenterio.jenkins.scriptlet.FileScriptlet
import com.zenterio.jenkins.scriptlet.IScriptlet
import com.zenterio.jenkins.scriptlet.TemplateScriptlet

/**
 * This scripts takes the template file JobIcon.template
 * and generates JobIcon.class based on the configuration in this file,
 * and the icon files in the icons directory.
 * DO NOT MODIFY JobIcon.groovy directly.
 * Instead, modify the template and generate a new version of JobIcon.groovy
 * Use the gradle task generateJobIconFile to run this script.
 * <p>
 * The registration of icons is done in a specific section.
 * use: reg "filename.png", "ENUM_NAME", "Legend help text"
 * or use null or no argument for enum name or legend help text to indicate that
 * no enum value should be generated, or the icon should not be present in
 * the legend.
 */

/**
 * Generates the code for Job icons based on the output from
 * the script 'install/configure-icons --list', the code template, and the
 * registered configuration.
 */
protected class JobIconFilesGenerator {

    private static class IconItem {
        String originalFileName
        String installedFileName
        String legendCaption
        String enumDefinition

        public IconItem(String originalFileName,
                String enumDefinition,
                String legendCaption,
                String installedFileName = null) {
            this.originalFileName = originalFileName
            this.enumDefinition = enumDefinition
            this.installedFileName = installedFileName
            this.legendCaption = legendCaption
        }
    }

    private List<IconItem> iconItems

    /**
     * Stores the mapping between file names and
     * the enum name.
     */
    private HashMap<String, String> file2Enum

    /**
     * The scriptlet is used as a template engine to generate
     * the Job Icon file.
     */
    private TemplateScriptlet jobIconTemplateEngine

    /**
     * The scriptlet is used as a template engine to generate
     * the legend HTML file.
     */
    private TemplateScriptlet legendTemplateEngine

    /**
     * @param template Scriptlet that is the base template.
     */
    public JobIconFilesGenerator(IScriptlet jobIcontemplate, IScriptlet legendHtmlTemplate) {
        this.file2Enum = new HashMap<String, String>()
        this.iconItems = new ArrayList<IconItem>()
        this.jobIconTemplateEngine = new TemplateScriptlet(jobIcontemplate)
        this.legendTemplateEngine = new TemplateScriptlet(legendHtmlTemplate)
        this.jobIconTemplateEngine.addMacroDefinitions([
            '#NOTICE#': escape("""\
/*
 * -------------------------------------------------------
 * THIS FILE IS AUTO-GENERATED!! DO NOT MODIFY DIRECTLY!!
 * THIS FILE HAS BEEN GENERATED BY THE SCRIPT:
 * seed/src/main/groovy/GenerateJobIconFile.groovy
 * VIA THE GRADLE TASK generateJobIconFiles
 * SEE GenerateJobIconFiles.groovy FOR MORE INFORMATION
 * -------------------------------------------------------
 */
""")])
       this.legendTemplateEngine.addMacroDefinitions([
           '#NOTICE#': escape("""\
<!--
* -------------------------------------------------------
* THIS FILE IS AUTO-GENERATED!! DO NOT MODIFY DIRECTLY!!
* THIS FILE HAS BEEN GENERATED BY THE SCRIPT:
* seed/src/main/groovy/GenerateJobIconFile.groovy
* VIA THE GRADLE TASK generateJobIconFiles
* SEE GenerateJobIconFiles.groovy FOR MORE INFORMATION
* -------------------------------------------------------
-->
""")])
    }

    /**
     *
     * @param filename Name of icon file, without directory path
     * @param enumName Name of the enum associated with the icon filename
     * @param legendCaption Text to appear in legend help
     * @return returns itself for safe use in with-context.
     */
    public JobIconFilesGenerator reg(String filename, String enumName = null, String legendCaption = null) {
        this.iconItems.add(new IconItem(filename, enumName, legendCaption))
        return this
    }

    /**
     * Generates Job Icon file
     * @param fileName Name of file where the generated content should be saved to.
     */
    public void generateJobIcon(String fileName) {
        this.populateInstallFileName(this.getIconFile2FileMap())

        this.jobIconTemplateEngine.addMacroDefinitions([
            '#ICON_DECLARATION#': escape(this.getEnumDeclarations())
        ])

        new File(fileName).withWriter({ out ->
            out.write(this.jobIconTemplateEngine.getContent())
        })
    }

    public void generateLegendHtml(String fileName) {
        this.populateInstallFileName(this.getIconFile2FileMap())

        this.legendTemplateEngine.addMacroDefinitions([
            '#LEGEND-DESCRIPTIONS#': escape(this.getLegendDescriptions())
        ])

        new File(fileName).withWriter({ out ->
            out.write(this.legendTemplateEngine.getContent())
        })
    }

    /**
     * Populates iconItems with installed filename.
     * @param f2f   Map between original icon filename and its installed filename.
     */
    private void populateInstallFileName(HashMap<String, String> f2f) {
        List<String> noMatch = new ArrayList<String>()
        f2f.each({ originalFileName, installedFileName ->
            Boolean found = false
            this.iconItems.each({ IconItem it ->
                if (it.originalFileName == originalFileName) {
                    it.installedFileName = installedFileName
                    found = true
                }
            })
            if (!found) {
                noMatch.add(originalFileName)
            }
        })
        this.printMissingFileDefinitions(noMatch)
    }

    /**
     * Returns enum declarations based on the icon items
     * @return string, enum declarations
     */
    private String getEnumDeclarations() {
        return this.iconItems.grep({ IconItem it ->
            (it.enumDefinition != null)
        }).collect({ IconItem it ->
            """    ${it.enumDefinition}("${it.installedFileName}"),"""
        }).sort().join("\n")
    }

    private String getLegendDescriptions() {
        return this.iconItems.grep({ IconItem it ->
            (it.legendCaption != null)
        }).sort({IconItem it -> it.legendCaption}).collect({ IconItem it ->
"""      <li class="zenterio-legend-item"><a href="#">
        <img class="zenterio-legend-icon" src="/userContent/customIcon/${it.installedFileName}"/> ${it.legendCaption}</a>
      </li>"""
        }).join("\n")
    }

    /**
     * Prints the list to stdout
     * @param misList
     */
    private void printMissingFileDefinitions(List<String> misList) {
        if (misList.size() > 0) {
            println "---------------------------------"
            println "The following icon files had no registered enum definition:"
            misList.each({ String fileName ->
                println fileName
            })
            println "---------------------------------"
        }
    }

    /**
     * @return map of original file names and the file names they will
     * have as installed icons.
     */
    private HashMap<String,String> getIconFile2FileMap() {
        HashMap<String,String> result = new HashMap<String, String>()
        "../install/configure-icons --list".execute().with({ Process proc ->
            proc.waitFor()
            proc.in.text.split("\n").each({ String line ->
                line.split(' ').with({ pair ->
                    result.put(pair[0], pair[1])
                })
            })
        })
        return result
    }
}

def generateIconFiles() {
    String jobIconTemplate = "src/main/groovy/com/zenterio/jenkins/JobIcon.template"
    String jobIconFile = "src/main/groovy/com/zenterio/jenkins/JobIcon.groovy"
    String legendHtmlTemplate = "../icons/legend.html.template"
    String legendHtml = "../icons/legend.html"
    def gen = new JobIconFilesGenerator(new FileScriptlet(jobIconTemplate),
        new FileScriptlet(legendHtmlTemplate))

    gen.with({
        // ICON REGISTRATION
        //  filename                    enum definition     Help legend caption
        reg "unit-test.png",            "UNIT_TEST",        "Unit test"
        reg "unit-test-inc.png",        "UNIT_TEST_INC"
        reg "compile-debug-inc.png",    "DCOMPILE_INC"
        reg "compile-debug.png",        "DCOMPILE",         "Compile debug"
        reg "compile-inc.png",          "COMPILE_INC"
        reg "compile.png",              "COMPILE"
        reg "compile-product-inc.png",  "PCOMPILE_INC"
        reg "compile-product.png",      "PCOMPILE",         "Compile production"
        reg "compile-release-inc.png",  "RCOMPILE_INC"
        reg "compile-release.png",      "RCOMPILE",         "Compile release"
        reg "coverity.png",             "COVERITY",         "Coverity"
        reg "database-black.png"
        reg "documentation-debug.png",  "DDOCUMENTATION"
        reg "documentation.png",        "DOCUMENTATION",    "Documentation"
        reg "documentation-product.png","PDOCUMENTATION"
        reg "documentation-release.png","RDOCUMENTATION"
        reg "flash.png",                "FLASH",            "Flash image to STB"
        reg "flow-inc.png",             "FLOW_INC"
        reg "flow-origin-inc.png",      "FLOW_ORIGIN_INC"
        reg "flow-origin.png",          "FLOW_ORIGIN",      "Build flows origin"
        reg "flow-product-inc.png",     "FLOW_PRODUCT_INC"
        reg "flow-product.png",         "FLOW_PRODUCT",     "Build flows product"
        reg "flow.png",                 "FLOW"
        reg "gear-orange-inc.png"
        reg "gear-orange.png"
        reg "help-gray.png"
        reg "help-legend.png",          "HELP"
        reg "help-orange.png"
        reg "incremental-icon.png",     "INC",              "Incremental Job"
        reg "package.png",              "PACKAGE",          "Package, bundled artifacts"
        reg "promote.png",              "PROMOTION",        "Promote build-chain"
        reg "annotate.png",             "ANNOTATE",         "Annotate build-chain"
        reg "seed.png",                 "SEED",             "Seed configuration"
        reg "sign.png",                 "SIGN",             "Sign"
        reg "tag.png",                  "TAG",              "Tag repositories"
        reg "test-checkmark.png",       "TEST_CHECKMARK",   "Test runners"
        reg "test-debug.png",           "TEST_DEBUG"
        reg "test-product.png",         "TEST_PRODUCT"
        reg "test-release.png",         "TEST_RELEASE"
        // -----
    })

    gen.generateJobIcon(jobIconFile)
    println("Generate Job Icon Groovy File Done!")
    gen.generateLegendHtml(legendHtml)
    println("Generate Legend HTML File Done!")
}

generateIconFiles()
