#!/usr/bin/env bash

set -eu

usage() {
    echo "Usage:"
    echo "  $SCRIPT [-h|--help]"
    echo "  $SCRIPT [-s] [--base-path BASE_DIR] [--src-path SRC_DIR]  [TARGET_DIR]"
    echo ""
    echo "  LOG_FILE: zftrace log file"
    echo "  TARGET_DIR: destination directory, defaults to current working directory (optional)"
    echo ""
    echo "Options:"
    echo "  -h                    Print usage."
    echo " --help                 Print extended usage."
    echo " -s                     Use symbolic linking (-s option to ln)."
    echo " --base-path BASE_DIR   Base path in log file that should be ignored."
    echo "                        Defaults to empty string and hence full path is used."
    echo " --src-path SRC_DIR     Alternative root source path."
    echo "                        Is prepended infront of the file paths in log file."
    echo ""
    echo "Links files found in the log file and in source to file structure in the target directory."
    echo "Directories are not linked, they are created."
    echo ""
    echo "NOTE! It is important that / or no / are equally used for all path arguments."
    echo ""

}

extended_usage() {
    usage
    echo ""
    echo "Example:"
    echo ""
    echo "User Alice has used zftrace and captured a log of important files in projectA."
    echo ""
    echo "log file (zftrace.log) contains:"
    echo "/home/alice/workspace/projectA/file1.txt"
    echo ""
    echo "User Bob also has projectA, but checked-out in a different directory."
    echo ""
    echo "Bobs file system is:"
    echo "/home/bob/ws/projectA/file1.txt"
    echo ""
    echo "Bob runs zftrace-ln to collect the important files in a separate directory using linking"
    echo "Command used:"
    echo "$ zftrace-ln --base-path /home/alice/workspace --src-path /home/bob/ws zftrace.log /home/bob/important_files"
    echo ""
    echo "Result:"
    echo "/home/bob/important_files/projectA/file1.txt"
    echo ""
    echo "NOTE! It is important that ending / or no / are equally used for all path arguments."
    echo ""
}

SCRIPT=$(basename $0)
BASE_DIR=
SRC_DIR=
LN_OPTS=

set +e
ARGS=$(getopt -o hs -l "base-path:,help,src-path:" -n "$SCRIPT" -- "$@");
if [ $? -ne 0 ]; then
    set -e
    usage
    exit 129
fi
set -e

eval set -- "$ARGS";

while true; do
    case $1 in
        -h)
            shift
            usage
            exit 0
            ;;
        -s)
            shift
            LN_OPTS=-s
            ;;
        --help)
            shift
            extended_usage
            exit 0
            ;;
        --base-path)
            shift
            BASE_DIR=$1; shift
            ;;
        --src-path)
            shift
            SRC_DIR=$1; shift
            ;;
        --)
            shift;
            break;
            ;;
    esac
done

echoerr() {
    cat <<< "$@" 1>&2;
}

# $1 - source file
# $2 - destination directory
# $3 - source directory
# $4 - base path
zftrace_link() {
    local log_file; log_file="$1"
    local target_dir; target_dir="$2"
    local src_dir; src_dir="$3"
    local base_dir; base_dir="$4"
    local ln_opts; ln_opts="$5"
    local parent_dir; local src; local dest;

    while IFS='' read -r line || [[ -n "${line}" ]]; do
          src=${line/${base_dir}/${src_dir}}
          dest=${line/${base_dir}/${target_dir}}

          if [ -f "${src}" ]; then
              parent_dir=$(dirname "${dest}")
              mkdir -p "${parent_dir}"
              ln ${ln_opts} "${src}" "${dest}"
          elif [ -d "${src}" ]; then
              mkdir -p "${dest}"
          else
              echo "File does not exist! ${src}"
          fi
    done < "${log_file}"
}

if [ ${#@} -ne 1 -a ${#@} -ne 2 ] ; then
    echoerr "${SCRIPT} requires one to two positional argument, LOG_FILE and TARGET_DIR (optional)."
    exit 129
fi

if [ ! -f "$1" ]; then
    echoerr "$1: no such file."
    exit 1
fi
LOG_FILE="$1"; shift

TARGET_DIR="./"
if [ ${#@} -eq 1 ]; then
    TARGET_DIR="$1"
fi

zftrace_link "${LOG_FILE}" "${TARGET_DIR}" "${SRC_DIR}" "${BASE_DIR}" "${LN_OPTS}"
